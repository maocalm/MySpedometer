package com.baisi.spedometer.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.baisi.spedometer.step.bean.SportRecordData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORT_RECORD_DATA".
*/
public class SportRecordDataDao extends AbstractDao<SportRecordData, Long> {

    public static final String TABLENAME = "SPORT_RECORD_DATA";

    /**
     * Properties of entity SportRecordData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SprotDate = new Property(1, java.util.Date.class, "SprotDate", false, "SPROT_DATE");
        public final static Property SimpleDate = new Property(2, String.class, "simpleDate", false, "SIMPLE_DATE");
        public final static Property Miles = new Property(3, float.class, "Miles", false, "MILES");
        public final static Property SportLong = new Property(4, long.class, "sportLong", false, "SPORT_LONG");
        public final static Property MilesNeedTime = new Property(5, String.class, "milesNeedTime", false, "MILES_NEED_TIME");
        public final static Property Steps = new Property(6, int.class, "steps", false, "STEPS");
    }


    public SportRecordDataDao(DaoConfig config) {
        super(config);
    }
    
    public SportRecordDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORT_RECORD_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SPROT_DATE\" INTEGER," + // 1: SprotDate
                "\"SIMPLE_DATE\" TEXT," + // 2: simpleDate
                "\"MILES\" REAL NOT NULL ," + // 3: Miles
                "\"SPORT_LONG\" INTEGER NOT NULL ," + // 4: sportLong
                "\"MILES_NEED_TIME\" TEXT," + // 5: milesNeedTime
                "\"STEPS\" INTEGER NOT NULL );"); // 6: steps
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORT_RECORD_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SportRecordData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date SprotDate = entity.getSprotDate();
        if (SprotDate != null) {
            stmt.bindLong(2, SprotDate.getTime());
        }
 
        String simpleDate = entity.getSimpleDate();
        if (simpleDate != null) {
            stmt.bindString(3, simpleDate);
        }
        stmt.bindDouble(4, entity.getMiles());
        stmt.bindLong(5, entity.getSportLong());
 
        String milesNeedTime = entity.getMilesNeedTime();
        if (milesNeedTime != null) {
            stmt.bindString(6, milesNeedTime);
        }
        stmt.bindLong(7, entity.getSteps());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SportRecordData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date SprotDate = entity.getSprotDate();
        if (SprotDate != null) {
            stmt.bindLong(2, SprotDate.getTime());
        }
 
        String simpleDate = entity.getSimpleDate();
        if (simpleDate != null) {
            stmt.bindString(3, simpleDate);
        }
        stmt.bindDouble(4, entity.getMiles());
        stmt.bindLong(5, entity.getSportLong());
 
        String milesNeedTime = entity.getMilesNeedTime();
        if (milesNeedTime != null) {
            stmt.bindString(6, milesNeedTime);
        }
        stmt.bindLong(7, entity.getSteps());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SportRecordData readEntity(Cursor cursor, int offset) {
        SportRecordData entity = new SportRecordData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // SprotDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // simpleDate
            cursor.getFloat(offset + 3), // Miles
            cursor.getLong(offset + 4), // sportLong
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // milesNeedTime
            cursor.getInt(offset + 6) // steps
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SportRecordData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSprotDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setSimpleDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMiles(cursor.getFloat(offset + 3));
        entity.setSportLong(cursor.getLong(offset + 4));
        entity.setMilesNeedTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSteps(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SportRecordData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SportRecordData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SportRecordData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
